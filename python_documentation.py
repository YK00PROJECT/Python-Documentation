# -*- coding: utf-8 -*-
"""Python_Documentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b6VlkcaMYyF80BJmEdGpG1r_3m8JhSE-

# Python Comments
"""

# this is a comment
print("Hello world!")
print("Hello World!") # This is another way to put comment
# Multiple comments
"""
This is a
multiline comment
which is more than one line
"""
print("All done!")

"""# Variable
Variables are containers for storing data values

"""

x = 5 # This is a integer type
y = "John" # This is a string type
print(x)
print(y)

"""# Casting
If you want to specify the data type of a variable, this can be done with casting.

One can get the type of a variable using type() function.

"""

x = int(3) # x will be 3
y = str(3) # y will be '3'
z = float(3) # z will be 3.0
print(type(x))
print(type(y))
print(type(z))

"""String Variables can be declared by sigle or double quotes.
Variable names are case sensitive.

"""

x = 'John'
y = "John"
a = 4
A = "Sector" # A will not overwrite a

"""# Rules for python variable naming:
A varaible can have a short name or a more descriptive name
A Variable must start with a letter or the underscore character
A Variable can not start with a number
A Variable name can ponly contain alpha numeric characters and underscores (A_Z , 0_9 , _)
Variable names are case_sensitive
A Variable name can not be any of the python keywords
"""

# Legal variable names
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"
print('\n')
# Wrong Variable names
2myvar = "John"
my-var = "John"
my var = "John"

"""# Multi Words Variable Names
Variable names with more than one word can be difficult to read.
Several techniques can be used:
Camel Case: Each words except the first, starts with a capital letter
Pascal Case: Each word starts with a capital letter.
Snake Case: Each word is separated by an underscore  character
"""

# CamelCase Version
mYvARIABLE = "John"

# Pascal Case Version
MyVariable = "John"

# Snake Case Version
my_variable = "John"

"""# Assigning Multiple Variables

Python allows to assign values to multiple variables in one line

One value to multiple variables

Unpack a collection: if one has a collection of values in a list, tuple, etc, python allows you to extract the values into variables. This is called unpacking.
"""

# Many values to Multiple Variables

x,y,z = "Orange","Banana","Cherry"
print(x)
print(y)
print(z)

# One value to multiple variable

x = y = z = "Orange"
print(x)
print(y)
print(z)

# Unpack a Collection

fruits = ["apple","banana","cherry"]
x,y,z = fruits
print(x)
print(y)
print(z)

"""# Output Variable

The python print() function is often used to output variables
In print() function, one can output multiple variables, separated by comma
One can use + operator for output multiple variables, but for numbers + operator works as a mathematical operator. consider that in print function, when one tries to combine a string and a number with + operator, python will give an error, the best way to poutput multiple variables with commas, which supports different data types.
"""

x = "Python is awesome"
print(x)

x = "Python"
y = "is"
z = "awesome"

print(x,y,z)

x = "Python"
y = "is"
z = "awesome"
print(x+y+z)

x = 5
y = 10
print(x+y)

x = 5
y = "John"
print(x + y)

"""# Global Variables

The variables that are created outside of a function are known as global variables. Global variables are used by everyone, both inside of a function or outside of a function.
If a variable created with the same name inside a function, this variable will be local, and can only used inside the function. The global variable with the same name will remain as it was, global and with the original value.
"""

x = "awesome"

def myfunc():
  print("Python is " + x)

myfunc()

x = "awesome"

def myfunc():
  x = "fantastic"
  print("Python is " + x)

myfunc()

print("Python is " + x)

"""# The Global Keyword
When one create a variable indside a function, that variable is local, and can only be used inside that function.

To create a global variable inside a function, one can use the global keyword. Use the global keyword if you want to change a global variable inside a function.
"""

def myfunc():
  global x
  x = "awesome"
  print("Python is " + x)
myfunc()

x = "awesome"

def myfunc():
  global x
  x = "fantastic"

myfunc()

print("Python is " + x)

"""# Built in Data Types

Variables can store data of different types and different types can do different things. Python has the following data types built-in by default


*   Test Type = str
*   Numeric Types = int, float, complex
*   Sequence Types = list, tuple, range
*   Mapping Type = dict
*   Set Types = set, frozenset
*   Boolean Type = bool
*   Binary Types = butes, bytearray, memoryview
*   None Type = NoneType  


Getting the data type of any object using the type() function
Setting the data type, one can use different constructor functions
"""

x = 5
y = "John"
z = 3.0
a = ["apple", "Banana"]
b = ("apple","banana")
c = {"name":"John","age":36}
d = True
e = b"Hello"
f = bytearray(5)
h = memoryview(bytes(5))
print(f)
print(h)

print(type(x))
print(type(y))
print(type(z))
print(type(a))
print(type(b))
print(type(c))
print(type(d))
print(type(e))
print(type(f))

x = str("Hello world!")
y = int(3)
z = float(3)
w = complex(1j)
a = list(("apple","banana","cherry"))
b = tuple(("apple","banana","cherry"))
c = range(6)
d = dict(name="John",age=36)
e = set(("apple","banana","cherry"))
f = frozenset(("apple","banana","cherry"))
g = bool(5)
h = bytes(5)
l = bytearray(5)
v = memoryview(bytes(5))

print(x)
print(y)
print(z)
print(w)
print(a)
print(b)
print(c)
print(d)
print(e)
print(f)
print(g)
print(h)
print(l)
print(v)

"""# Python Numbers
There are three numeric types in python:


*   int
*   float
*   complex

Integers = is a whole number, positive, negative, without decimals of unlimited length.
Float or floating point number is a number positive, or negative, containing one or more decimals.float can also be scientific numbers with a "e" to indicate the power of 10.
Complex number are written with a "j" as the imaginary part.

*   Converting from one type of number to another with int(),float(), complex()
*   Random number: The python has no random() function, but it has builtin module called random that can be used to make random numbers




"""

x = 1
y = 2.8
z = 1j

print(type(x))
print(type(y))
print(type(z))

x = 35e3
y = 12E4
z = -87.7e100

print(type(x))
print(type(y))
print(type(z))

x = 3j
y = 5+2j
z = -5j

print(type(x))
print(type(y))
print(type(z))

a = 1
b = 2.8
c = 1j

x = float(a)
y = int(b)
z = complex(a)

print(x)
print(y)
print(z)

print(type(x))
print(type(y))
print(type(z))

import random
print(random.randrange(1,10))

import random
print(random.randint(1,10))

"""# Python Casting
Using constructors such as int(), float(), str()
"""

x = int(1)
y = int(2.8)
z = int("3")

print(x)
print(y)
print(z)

x = float(1)
y = float("4.2")
z = float("3")

print(x)
print(y)
print(z)

x = str("s1")
y = str(2)
z = str(3.0)

print(x)
print(y)
print(z)

"""# Python String
Strings in python are surrounded by either single or double quotation marks. One can display a string literal by using print() function.

*   A multilinr string can be assigned to a variable
*   Strings in python are arrays of bytes representing unicode characters. Square brackets can be used to access elements of a string.
*   Since strings are arrays, one can loop through the characters in a string, with a for loop.
*   The len() function returns the length of a string.
*   Check if a certain character is present in a tring, one can use keyword in.
*   To check if a certain character is not presented in a string, one can use the keyword not in.







"""

print('Hello')
print("Hello")
# Assign string to a variable
a = "Hello"
print(a)

# Multiline Strings
a = """Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."""
print(a)

# Strings are arrays

a = "Hello, World!"
print(a[1])

# Using for loop
a = "Hello, world!"
for ch in a:
  print(ch)

# len() function
a = "Hello, World!"
print(len(a))

# Check String
txt = "The best things in life are free!"
print("free" in txt)
# or
if "free" in txt:
  print("Yes, 'free' is present.")

txt = "The best things in life are free!"
print("expensive" not in txt)
if "expensive" not in txt:
  print("Yes, 'expensive' is not present.")

"""# Python _ Slicing Strings
One can return a range of characters by using the slice syntax. By specifying the start index and the end index, separated by a colon, to return a part of the string.
"""

b = "Hello, World!"
print(b[2:5])

# Slice from the start
b = "Hello, World!"
print(b[:5])

# Slice to the end
b = "Hello, World!"
print(b[2:])

# Negaive Indexing
b = "Hello, World!"
print(b[-5:-2])

b = "Hello, World!"
print(b[:-1])

"""# Python - Modifying String
Python has a set of built-in methods that one can use on strings.
Different Methods

*   Upper Case
*   Lower Case
*   Remove White Spaces
*   Replace String
*   Split String






"""

# Upper Case
a = "hello, world!"
print(a.upper())

# Lower Case
a = "HELLO, WORLD!"
print(a.lower())

# Remove White Spaces: strip() function removes any whitespace from the beginning and the end
a = "Hello, World!"
print(a.strip())

# Replace String:
a = "Hello, World!"
print(a.replace("H","J"))

# Split String splits the string into substrings and creates a list
a = "Hello, World!"
print(a.split())

"""# Python - String Concatenation
To combine two or more strings one can use the + operator.
"""

a = "Hello"
b = "World"
c = a + b
print(c)

a = "Hello"
b = "World!"
c = (a + " " + b)
print(c)

"""# String Format
one can combine strings and numbers by using the format() function. The format() function takes the passed arguments, format them, and places them in the string where the placeholders {} are and format() takes unlimited number of arguments.
"""

age = 36
print(f"my name is John and I am {age}")

quantity = 3
itemno = 567
price = 49.95
myorder = "I want {0} pieces of item {1} for price {2}"
print(myorder.format(quantity, itemno, price))

quantity = 3
itemno = 567
price = 49.95
myorder = "I want {} pieces of item {} for price {}"
print(myorder.format(quantity, itemno, price))

"""# Python Escape Characters
To insert characters that are illegal in a string, use an escape character. An escape character is a backslash \ followed by the character you want to insert.


1.   \' single Quote
2.   \\ Backslash
*    \n New line
*    \r Carriage Return
*    \t Tab
*    \b Backspace
*    \f Form Feed
*    \ooo Octal value
*    \xhh Hex Value










"""

txt = "we are the so called "Vikings" from the north"

txt = "We are the so called \"Vikings\from the north."

# single Quote
txt = 'It \'s alright.'
print(txt)

# Backslash
txt = "This will insert one \\ (backslash)"
print(txt)

# New line
txt = "Hello\nWorld!"
print(txt)

# Carriage Return
txt = "Hello\rWorld!"
print(txt)

# Tab
txt = "Hello\tworld1"
print(txt)

# Backspace
txt = "Hello\bworld!"
print(txt)

# Form Feed
txt = "Hello\fworld!"
print(txt)

# Octal value is a backslash followed by three integers will result in a octal value
txt = "\110\145\154\154\157"
print(txt)

# hex value is a backslash followed by an 'x' and a hex number represent a hex value
txt = "\x48\x65\x6c\x6c\x6f"
print(txt)

"""# string Methods


*   capitalize(): converts the first character to upper case
*   casefold(): converts the string into lower case.
*   center(): returns a centered string
*   count(): returns the number of times a specific value occurs in a string.
*   encode(): returns an encoded version of the string.
*   endswith(): returns true if the string ends with the specified value.
*   expandtabs(): sets the tab size of the string.
*   find(): searches the string for a specified values and returns the position of where it was found.
*   format(): formats specified values in a string.
*   format_map(): formats specified values in a string.
*   index(): searches the string for a specified value and returns the position of where it was found.
*   isalnum(): returns true if all characters in the string are alphanumeric.
*   isalpha(): returns true if all characters in a string are alphabets.
*   isascii(): returns true if all characters in the strings are ascii characters.
*   isdecimal(): returns true if all characters in a string are decimals.
*   isdigit(): returns true if all characters in a string are digits.
*   isidentifier(): returns true if a string is an identifier.
*   islower(): returns true if all characters in a string are lowercase.
*   isnumeric(): returns true if all characters in a string are numeric
*   isprintable(): returns true if all characters in a string are printable.
*   isspace(): returns true if all characters in a strig are whitespaces.
*   istitle(): returns true if a string follows the rules of a title.
*   isupper(): returns true if all characters in a string are uppercase.
*   join(): joins the elements of an iterable to the end of the string.
*   !just(): returns a left justified version of the string.
*   lower(): converts a string into lowercase.
*   Istrip(): returns a left trim version of e string.
*   maketrans(): returns a translation table to be used in translations.
*   partition(): returns a tuple where the string is parted into three parts.
*   rfind():searches the string for a specified value and returns the last position of where it was found.
*   rindex(): searches the string for a specified value and returns the last position of where it was found.
*   rjust(): returns a right justified version of a string
*   rpartition(): returns a tuple where a string is parted into three parts.
*   rsplit(): splits a string at the specified separator and returns a list.
*   splitlines(): splits the string at the specified separator and returns a list.
*   startswith(): returns true is the string starts.
*   strip(): returns a trimmed version of the string.
*   swapcase(): swaps cases, lower case becomes upper case and vice versa.
*   title(): converts the first character of each word to upper case.
*   translate(): return a translated string.
*   upper(): converts a string to upper case.
*   zfill(): Fills the string with specific number of 0 values at the beginning.
*   rstrip(): returns a right trim version of a string.
*   splitlines(): splits a string at line breaks and returns a list.

# Boolean Values

Evaluating any expression in python, gives one one of two answers, True or False.
"""

print(10 > 9)
print(10 == 9)
print(10 < 9)

a = 200
b = 33

if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")

#the bool() function allows you to evaluate any value, and give one  True and False in return.
print(bool("Hello"))
print(bool(15))

x = "Hello"
y = 15

print(bool(x))
print(bool(y))

"""
Any string is true, except empty string
Any number is true, except 0
Any list, tuple, and dictionary are True, except empty ones.
"""
list1 = []
print(bool(123))
print(bool(""))
print(bool(list1))
print(bool("Hello"))
print(bool(["apple","banana","cherry"]))
print(bool(0))
print(bool())
print(bool({}))
print(bool(None))
print(bool(False))

class myclass():
  def __len__(self):
    return 0

myobj = myclass()
print(bool(myobj))

# function returning a boolean value
def myfunc():
  return True

print(myfunc())

def myfunc():
  return True

if myfunc():
  print("yes")
else:
  print("No!")

# The isinstance() function, which can be used to determine if an object is of a certain data type.
x = 200
print(isinstance(x,int))

"""# Python Arithmetic Operators

+ == Addition == x + y
- == Subtraction == x - y
* == Multiplication == x * y
/ == Division == x / y
% == Modulus == x % y
** == Exponentiation == x ** y
// == Floor division == x//y

# Python assignemnt Operators

*   = ==> x = 5
*   += ==> x += 3 ==> x = x + 3
*   -= ==> x -= 3 ==> x = x - 3
*   *= ==> x *= 3 ==> x = x * 3
*   /= ==> x /= 3 ==> x = x / 3
*   %= ==> x %= 3 ==> x = x % 3
*   //= ==> x //= x ==> x = x // 3
*   **= ==> x **/ 3 ==> x = x ** 3
*   &= ==> x &= 3 ==> x = x & 3
*   |= ==> x |= 3 ==> x = x | 3
*   ^= ==> x ^= 3 ==> x = x ^ 3
*   >>= ==> x >>= 3 ==> x = x >> 3
*   <<= ==> x <<= 3 ==> x = x << 3

# Python Comparison Operators



*   == ==> Equal ==> x == y
*   != ==> Not Equal ==> x != y
*   #> ==> Greater ==> x > y
*   #< ==> Less Than ==> x < y
*   #>= Greater than or equal ==> x >= y
*   <= ==> Less than or equal ==> x <= y

# python Logical operators

*   and ==> Returns True if both statements are True ==> x < 5 and x < 10
*   or ==> Returns True if one of the statements is True ==> x < 5 or x < 4
*   not => Reverse the result, returns False if the result is True ==> not(x< 4 and x < 5)

# python identity Operators

*   is ==> Returns true if both variables are the same object ==> x is y
*   is not ==> Returns True if both variables are not the same object ==> x is not y.

# Python Membership Operators

*   in ==> Returns True if a sequence with the specified value is present in the object ==> x in y
*   not in ==> Returns if a sequence with the specified value is not present in the object ==> x not in y

# python bitwise Operators



*   & ==> AND ==> sets each bit to 1 if both bits are 1 ==> x & y
*   | ==> OR ==> sets each bit to 1 if one of two bits is 1 ==> x | y
*   ^ ==> XOR ==> Sets each bit to 1 if only one of two bits is 1 ==> x ^ y
*   ~ ==> NOT ==> Inverts all the bits ==> ~x
*   #<< ==> Zero Fill left shift ==> Shift left by pushing zeros in from the right and let the leftmost bits fall off ==> x << 2
*   #>> ==> Signed right shift ==> Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off ==> x >> 2

# Operator Precedence



*   () ==> Parantheses
*   ** ==> Exponentiation
*   +x -x ~x ==> Unary plus, unary minus, and bitwise NOT
*  empty * / // % ==> Multiplication, division, floor division, and modules
*  empty + - ==> Addition, subtraction
*  empty << >> ==> Bitwise left and right shifts
*   & Bitwise AND
*   ^ Bitwise XOR
*   | ==> Bitwise OR
*  empty == != > >= < <= is is not in not in ==> Comparison, identity, and membership operators
*   not ==> Logical NOT
*   and ==> AND
*   or ==> OR
"""

# operator Precedence
print((6 + 3) - (6 + 3))
print(5 + 4 - 7 + 3)
print(100 + 5 * 3)

"""# Python Lists
Storing multi variables with different types, lists are mutable.

List items are ordered, changeable, and allow duplicate values.

When we say that lists are ordered, it means that the items have a defined order, and that order will not change.

If you add new items to a list, the new items will be placed at the end of the list.

The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.
"""

mylist = ["apple", "banana","cherry"]
mylist2 = [40,True,"abc",89,"male"]
print(mylist)
print(len(mylist))
print(type(mylist))

# List Constructor: list() function to make a list
thislist = list(("apple","cherry","orange"))
print(thislist)

"""Python Collections (Arrays)

There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.

Tuple is a collection which is ordered and unchangeable. Allows duplicate members.

Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.

Dictionary is a collection which is ordered and changeable. No duplicate members
"""

print(mylist[1])

print(mylist[-1])

# Range of Indexes

#You can specify a range of indexes by specifying where to start and where to end the range.

#When specifying a range, the return value will be a new list with the specified items.

print(mylist[1:3])
print(mylist[:1])
print(mylist2[2:])

# Range of Negative Indexes
print(mylist2[-4:-1])

# Check if Item Exists: To determine if a specified item is present in a list use the in keyword
thislist=["apple","cherry","orange"]
if "apple" in thislist:
  print("Yes, apple is in this list")

# Change Item Value: To change the value of a specific item, refer to the index number
countrylist = ["USA","Germany","sweden"]
countrylist[0] = "IRAN"
print(countrylist)

# Chabge a range of values
countrylist = ["USA","Germany","sweden"]
countrylist[0:2] = ["USA","Iran"]
print(countrylist)

thislist = ["apple", "banana", "cherry"]
thislist[1:2] = ["blackcurrant", "watermelon"]
print(thislist)

"""["watermelon"] is a new list containing a single element, "watermelon".
The assignment (=) replaces the slice of the original list (["banana", "cherry"]) with the new list (["watermelon"])"""

thislist = ["apple", "banana", "cherry"]

thislist[1:3] = ["watermelon"]

print(thislist)

# Insert Items: To insert a new list item, without replacing any of the existing values, we can use the insert() method at the specified index
thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
thislist.insert(2,"zebra")
print(thislist)

# append() function: the new item gets added to the end of the list
thislist = ["apple", "banana", "cherry"]
thislist.append("orange")
print(thislist)

# Insert: adding an elemnet to a specific position in the list
thislist = ["apple", "banana", "cherry"]
thislist.insert(0,"orange")
print(thislist)

# extend(): adding elements from another list to the current list
thislist = ["apple", "banana", "cherry"]
otherlist = ["mango","pineapple","papaya"]
thislist.extend(otherlist)
print(thislist)

# add any iterable: the extend() can append not only list but any iterable object(tuple,set,dictionary)
thislist = ["apple", "banana", "cherry"]
otherlist = ("mango","kiwi")
thislist.extend(otherlist)
print(thislist)

# remove(): remove specific item
thislist = ["apple", "banana", "cherry"]
thislist.remove("banana")
print(thislist)

# if there are more than one item with specified value, the remove() method removes the first occurance
thislist = ["apple", "banana", "cherry","banana"]
thislist.remove("banana")
print(thislist)

# pop(): remove by specific index
# if no index specified, the last item is getting removed by pop()
thislist = ["apple", "banana", "cherry"]
thislist.pop(1)
print(thislist)

# del(): delets the list compeletely
thislist = ["apple", "banana", "cherry"]
del(thislist)
print(thislist)

thislist = ["apple", "banana", "cherry"]
del(thislist[0])
print(thislist)

# clear(): empties the list
thislist = ["apple", "banana", "cherry"]
thislist.clear()
print(thislist)

# loop through a list
thislist = ["apple", "banana", "cherry"]
for item in thislist:
  print(item)

# loop through the list items by referring to their index number using range() or len() functions
thislist = ["apple", "banana", "cherry"]
for num in range(len(thislist)):
  print(thislist[num])

thislist = ["apple", "banana", "cherry"]
i = 0
while i < len(thislist):
  print(thislist[i])
  i += 1

# list comprehension
thislist = ["apple", "banana", "cherry"]
[print(x) for x in thislist]

thislist = ["apple", "banana", "cherry"]
[print(thislist[num]) for num in range(len(thislist))]

# Based on a list of fruits, you want a new list, containing only the fruits with the letter "a" in the name
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []
for x in thislist:
  if "a" in x:
    newlist.append(x)
print(newlist)

# list comprehension
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = [x for x in thislist if "a" in x]
print(newlist)

newlist = [x for x in range(10)]
print(newlist)

newlist = [x for x in range(10) if x <= 5]
print(newlist)

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = [x.upper() for x in fruits]
print(newlist)

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = ["hello" for x in fruits]
print(newlist)

# Return "orange" instead of "banana"
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = [x if x != "apple" else "orange" for x in fruits]
print(newlist)

# Sorting Lists
#sort(): will sort the list alphanumerically, ascending by default
thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()
print(thislist)

thislist = [100, 50, 65, 82, 23]
thislist.sort()
print(thislist)

# Sort descending
thislist = [100, 50, 65, 82, 23]
thislist.sort(reverse = True)
print(thislist)

thislist = [100, 50, 65, 82, 23]
thislist.sort(reverse = False)
print(thislist)

# Customizing sort function by using a keyword argument key = function
def myfunc(n):
  return abs(n - 50)
thislist = [100, 50, 65, 82, 23]
thislist.sort(key = myfunc)
print(thislist)

# Case sensitive: sort() is case sensitive, resulting in all capital letters being sorted before lower case letters
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort()
print(thislist)

# Case insensitive sort: using str.lower as key function
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort(key = str.lower)
print(thislist)

# reverse order: the reverse() method reverses the current sorting order of the elements
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.reverse()
print(thislist)

# Copy list
"""You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1,
and changes made in list1 will automatically also be made in list2.
There are ways to make a copy, one way is to use the built-in List method copy()."""

thislist = ["apple", "banana", "cherry"]
thislist.copy()
print(thislist)

# Another way to make a copy is to use the built-in method list().
thislist = ["apple", "banana", "cherry"]
newlist = list(thislist)
print(newlist)

# Join Two Lists: There are several ways to join, or concatenate, two or more lists in Python.
# One of the easiest ways are by using the + operator.
list1 = ["a","b","c"]
list2 = [1,2,3]
list3 = list1 + list2
print(list3)

# Another way to join two lists is by appending all the items from list2 into list1, one by one
list1 = ["a,""b","c"]
list2 = [1,2,3]
for x in list2:
  list1.append(x)
print(list2)

#  use the extend() method, where the purpose is to add elements from one list to another list
list1 = ["a","b","c"]
list2 = [1,2,3]
list1.extend(list2)
print(list1)

"""## Tuple

Tuples are used to store multiple items in a single variable.

Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.

A tuple is a collection which is ordered and unchangeable.

Tuples are written with round brackets.

Tuple items are ordered, unchangeable, and allow duplicate values.

Tuple items are indexed.

 tuples are ordered, it means that the items have a defined order, and that order will not change.

 Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.

Since tuples are indexed, they can have items with the same value
"""

thistuple = ("a","b","c")
print(thistuple)

thistuple = ("a","b","c","d","a")
print(thistuple)

# Tuple Length
thistuple = ("a","b","c","d","a")
print(len(thistuple))

# Tuple Type
thistuple = ("apple")
print(type(thistuple))

thistuple = ("apple",)
print(type(thistuple))

# A tuple can contain different data types
thistuple = ("a",100, True, "b","male")
print(thistuple)

# Tuple constructor: tuple() can be used to make a tuple
# Very important the double round brackets, otherwise it will generate an error
thistuple = tuple(("a","b","c"))
print(type(thistuple))

# access tuple items
thistuple = ("a","b","c","d")
print(thistuple[0])

# Negative indexing
thistuple = ("a","b","c","d")
print(thistuple[-1])

# Range of indexes
thistuple = ("a","b","c","d")
print(thistuple[0:2])

thistuple = ("a","b","c","d")
print(thistuple[:3])

thistuple = ("a","b","c","d")
print(thistuple[2:])

# Range of negative indexes
thistuple = ("a","b","c","d")
print(thistuple[-3:-1])

# check if the item exists in a tuple
thistuple = ("a","b","c","d")
if "c" in thistuple:
  print("C exists in this tuple")

""" CHanging value in a Tuple
Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.

But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple
"""

x = ("apple","banana","mago")
newlist = list(x)
newlist[1] = "kiwi"
print(newlist)
x = tuple(newlist)

# Adding Items to a tuple
x = ("apple","banana","mago")
newlist = list(x)
newlist.append("orange")
thistuple = tuple(newlist)
print(thistuple)

# Adding one tuple to another tuple
x = ("a","b","c")
y = (1,2,3)
d = x + y
print(d)

# removing items from tuple
x = (1,2,3)
newlist = list(x)
newlist.remove(2)
thistuple = tuple(newlist)
print(thistuple)

# deleting a tuple using del()
thistuple = (1,2,3)
del thistuple
print(thistuple)

# Unpacking Tuple
# when we create a tuple, we assign values to it, it is called packing
thistuple = (1,2,3,4,5)

# but in python, one can extract values back into variables, this called unpacking
thistuple = ("apple","kiwi","banana")
(red,green,yellow) = thistuple
print(green)
print(red)
print(yellow)

# Using Astrick: If the number of variables is less than the number of values, you can add an * to the variable name and the values will be assigned to the variable as a list
fruits = ("banana","kiwi","apple","orange","strawberry")
(green,red,*black) = fruits
print(green)
print(red)
print(*black)

"""If the asterisk is added to another variable name than the last, Python will assign values to the variable until the number of
values left matches the number of variables left"""
fruits = ("banana","kiwi","apple","orange","strawberry")
(red,*green,black) = fruits
print(red)
print(*green)
print(black)

# For loop
thistuple = ("apple", "banana", "cherry")
for i in thistuple:
  print(i)

thistuple = ("apple", "banana", "cherry")
for i in range(len(thistuple)):
  print(thistuple[i])

# Using while loop
i = 0
while i < len(thistuple):
    print(thistuple[i])
    i += 1

# Join two tuples
tuple1 = ("a","b","c","d")
tuple2 = (1,2,3,4,)
tuple3 = tuple1 + tuple2
print(tuple3)

# Multiply tuple: If you want to multiply the content of a tuple a given number of times, you can use the * operator
thistuple = ("apple","kiwi","mango")
mytuple = thistuple * 2
print(mytuple)

# count(): Return the number of times a specific element occurs in a tuple
thistuple = ("apple","kiwi","mango")
print(thistuple.count("apple"))

"""## SETS

A set is a collection which is unordered, unchangeable*, and unindexed.

Sets are written with curly brackets.

Set items are unordered, unchangeable, and do not allow duplicate values.


"""

thisset = {"apple","kiwi","mango","orange"}
print(thisset)

# no duplicate is allowed: Duplicate values will be ignored
thisset = {"apple","kiwi","mango","strawberry","apple"}
print(thisset)

# True and 1 are considered the same value
thisset = {"apple","kiwi","orange",True,1}
print(thisset)

# False and 0 are considered the same value
thiset = {"apple","kiwi","orange",0,False}
print(thisset)

# Length of a set: using len()
thisset = {"orange","kiwi","apple"}
print(len(thisset))

# Data types: type()
thisset = {"apple","kiwi","orange"}
print(type(thisset))

# Set data types: A set can contain different data types
thisset = {1,2,3,4}
thisset1 = {"a","b","c","d"}
thisset2 = {True,False,True,False}
thisset3 = {"a",1,"Male",True}
print(thisset)
print(thisset1)
print(thisset2)
print(thisset3)

# The set() Constructor: It is also possible to use the set() constructor to make a set
# note the double round-brackets
thisset = set(("a","b","c","d"))
print(thisset)

# Set access item
thisset = {1,2,3,4}
for num in thisset:
  print(num)

thisset = {"apple","kiwi","orange"}
if "orange" in thisset:
  print("Orange exists in this set")

"""# Change items in set: Once a set is created, you cannot change its items, but you can add new items."""

# Add item to a set: Once a set is created, you cannot change its items, but you can add new items.
# To add one item to a set use the add() method.

thisset = {1,2,3,4}
thisset.add(5)
print(thisset)

# Add sets: To add items from another set into the current set, use the update() method.
set1 = {1,2,3,4}
set2 = {"a","b","c","d"}
set1.update(set2)
print(set1)

# Add any iterable: The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.)
set1 = {1,2,3,4}
list1 = ["a","b","c","d"]
set1.update(list1)
print(set1)

# Remove item from set: To remove an item in a set, use the remove(), or the discard() method.
# Note: If the item to remove does not exist, remove() will raise an error.
thisset = {1,2,3,4,5,6}
thisset.remove(5)
print(thisset)

# usinf discard(): Note: If the item to remove does not exist, discard() will NOT raise an error
thisset = {"a","b","c","d"}
thisset.discard("c")
print(thisset)

# pop(): Remove a random item by using the pop() method, Sets are unordered, so when using the pop() method, you do not know which item that gets removed.
set1 = {1,2,3,4,5,6,7,8,9}
set1.pop()
print(set1)

# clear():emptoes the set
set1 = {1,2,3,4}
set1.clear()
print(set1)

# del: will delete the set completely
set1 = {1,2,3,4}
del set1
print(set1)

# set loop
set1 = {"a","b","c","d"}
for x in set1:
  print(x)

# Join sets
# There are several ways to join two or more sets in Python
# The union() method returns a new set with all items from both sets
set1 = {1,2,3,4}
set2 = {"a","b","c","d"}
set3 = set1.union(set2)
print(set3)

# The update() method inserts the items in set2 into set1
set1 = {1,2,3,4}
set2 = {"a","b","c","d"}
set1.update(set2)
print(set1)

"""Note: Both union() and update() will exclude any duplicate items"""

# Keep only the duplicates: The intersection_update() method will keep only the items that are present in both sets
# Keep the items that exist in both set x, and set y
set1 = {1,2,3,4,5,6}
set2 = {5,6,7,8,9,0}
set1.intersection_update(set2)
print(set1)

# The intersection() method will return a new set, that only contains the items that are present in both sets
set1 = {1,2,3,4,5}
set2 = {1,"a","b",4}
set1.intersection(set2)

# The symmetric_difference_update() method will keep only the elements that are NOT present in both sets.#
set1 = {1,2,3,4,5,6}
set2 = {5,6,7,8,9,0}
set1.symmetric_difference_update(set2)
print(set1)

# The symmetric_difference() method will return a new set, that contains only the elements that are NOT present in both sets.
set1 = {1,2,3,4,5,6}
set2 = {5,6,7,8,9,0}
set3 = set1.symmetric_difference(set2)
print(set3)

# The values True and 1 are considered the same value in sets, and are treated as duplicates
set1 = {True,2,4,5,6}
set2 = {1,7,8,9,0}
newset = set1.symmetric_difference(set2)
print(newset)

# Set Disjoin: Returns True if no items in set1 is presented in set2 using isdisjoint
set1 = {1,2,3,4,5,6}
set2 = {"a","b","c","d","e"}
newset = set1.isdisjoint(set2)
print(newset)

set1 = {"apple","mangi","kiwi"}
set2 = {"kiwi","cucumber","orange"}
newset = set1.isdisjoint(set2)
print(newset)

# Set issubset() method: returns True if all items in set1 are presented in set2
set1 = {1,2,3,4,5}
set2 = {1,2,3,4,5}
set3 = set1.issubset(set2)
print(set3)

set1 = {1,2,3,4}
set2 = {1,2,3,"a"}
set3 = set1.issubset(set2)
print(set3)

# Set issuperset() method: return true if all items in set2 are presented in set1
x = {"f","e","d","c","b","a"}
y = {"c","b","a"}
z = x.issuperset(y)
print(z)

x = {"f","e","d","c","b","a"}
y = {"c","b","w"}
z = x.issuperset(y)
print(z)

"""# Dictionaries
Dictionaries are used to store data values in key:value pairs, Dictionaries are written with curly brackets, and have keys and values

A dictionary is a collection which is ordered*, changeable and do not allow duplicates

When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.

Unordered means that the items does not have a defined order, you cannot refer to an item by using an index.

Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.
"""

thisdic = {"brand":"Ford",
          "Model":"Mustang",
          "Year":1964}
print(thisdic)

# Dictionary Items: Dictionary items are presented in key:value pairs, and can be referred to by using the key name
print(thisdic["brand"])

# Duplicate values will overwrite existing values, last value gets written.
thisdic = {"brand": "ford",
           "model": "mustang",
           "year": 1969,
           "year": 1973}

print(thisdic)

thisdic = {"brand":"BMW",
           "model":"7series",
           "year": 1988
          }
print(len(thisdic))

thisdic = {"brand":"BMW",
           "model":"7series",
           "year": 1988}
print(type(thisdic))

thisdic = {"brand":"BMW",
           "model":"7series",
           "year": 1988,
           "colors":["red","green","blue"]}

print(thisdic)

thisdic = dict(brand = "BMW",model = "7series",year = 1988, colors = ["red","blue","green"])
print(thisdic)

# Dictionary Accessing Items
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdic["model"]

# Another method is using get
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdic.get("model")

# to get the key values in a dictionary
thisdic.keys()

# Adding a new value to a dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = thisdic.keys()
print(x)
thisdic["model"] = "6series"
print(thisdic)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdic["year"] = 2019
print(thisdic)

# Get items (key and values) from a dictionary: items()
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdic.items()

# values(): values() method will return a list of all the values in the dictionary
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
car.values()
car["model"]
car.items()
car.keys()
car.get("model")

# Add a new item to the original dictionary
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
car["color"] = "red"
print(car)

# Changing an item in the dictionary using items to view the items and then change it
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
x = car.items()
print(x)
car["year"] = 2020
print(car)

# Checking if key exists in a dictionary
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
if "model" in car:
  print("Yes, this key exists")
else:
  print("No key exists")

# Change dictionary items
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
car["year"] = 2020
print(car)

# The update() method will update the dictionary with the items from the given argument.

# The argument must be a dictionary, or an iterable object with key:value pairs.
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"model":"BMW"})
print(thisdict)

# Adding items to dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdic["color"] = "red"
print(thisdict)

# The update() method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"color":"red"})
print(thisidct)

# Removing Dictionary items
# The pop() method removes the item with the specified key name
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model")
print(thisdict)

# The popitem() method removes the last inserted item
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.popitem()
print(thisdict)

# The del keyword removes the item with the specified key name
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict["model"]
print(thisdict)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict
print(thisdict)

# The clear() method empties the dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)

# Loop through dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
for x in thisdict:
  print(x)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
for x in thisdict.values():
  print(x)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
for x in thisdict.keys():
  print(x)

for x,y in thisdict.items():
  print(x,y)

# Copy a dictionary

# You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.

# There are ways to make a copy, one way is to use the built-in Dictionary method copy().

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
newdict = thisdict.copy()
print(newdict)

# Make a copy of a dictionary with the dict() function
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
newdict = dict(thisdict)
print(newdict)

# Nested Dictionaries
# A dictionary can contain dictionaries, this is called nested dictionaries
myfamily = {"child1":{"name":"John","year":2014}, "child2": {"name":"Alex","year":2011}, "child2":{"name":"Dexter","year":2019}, "child3":{"name":"Lion","year": 1982}}
print(myfamily)

child1 = {"name":"John","year":2011}
child2 = {"name":"Alex","year":2012}
child3 = {"name":"Lion","year":2019}
myfamily = {"child1":child1,"child2":child2,"child3":child3}
print(myfamily)

# Access items in nested dictionary
print(myfamily["child1"]["name"])

# dictionary fromkeys() method: returns a dictionary with the specified keys and the specified value.
# dict.fromkeys(keys, value)
"""
Parameter	Description
keys	Required: An iterable specifying the keys of the new dictionary
value	Optional: The value for all keys. Default value is None

"""
x = ("key1","key2","key3")
y = 0
thisdict = dict.fromkeys(x,y)
print(thisdict)

x = ("key1","key2","key3")
thisdict = dict.fromkeys(x)
print(thisdict)

# python dictionary setdefault() method: returns the value of the item with the specified key.
# dictionary.setdefault(keyname, value)
"""
keyname	Required. The keyname of the item you want to return the value from
value	Optional.
If the key exist, this parameter has no effect.
If the key does not exist, this value becomes the key's value
Default value None
"""
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = car.setdefault("color","white")
print(x)
print(car)

"""# Python if ... else
Equals a ==b
not equal a!=b
less than a < b
less than or equal a <= b
greater than a > b
greater than or equal a >= b
"""

a = 33
b = 200
if b > a:
  print("b is greater than a")

a = 33
b = 33
if a > b:
  print("a is greater than b")
elif a ==b:
  print("a and b are equal")

a = 200
b =33
if a < b:
  print("a is less than b")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

a = 200
b = 33
if b > a:
  print("b is greater than a")
else:
  print("a is greater than b")

"""# This technique is known as Ternary Operators or conditional expression"""

a = 300
b = 200
if a > b: print("A is greater than B")

# short hand if
print("A is greater than b") if a > b else print("B is greater than A")

a = 2
b = 330
print("A") if a > b else print("B")

print("A") if a < b else print("=") if a == b else print("B")

# And: The and keyword is a logical operator, and is used to combine conditional statements
a = 200
b = 33
c = 500
if a > b and c > b:
  print("Both conditions are True")

# OR: The or keyword is a logical operator, and is used to combine conditional statements
a = 200
b = 33
c = 500
if a > b or c < b:
  print("At least one condition is true")

# Not: The not keyword is a logical operator, and is used to reverse the result of the conditional statement
a = 300
b = 55
if not b > a:
  print("this statement is True")

# Nested if: You can have if statements inside if statements, this is called nested if statements.
x = 41

if x > 10:
  print("Above ten, ")
  if x > 20:
    print("and also above 20!")
  else:
    print("but not above 2.0")
else:
  print("it is ")

a = 33
b = 200
if a > b:
  pass

# Python while loop
i = 1
while i < 6:
  print(i)
  i += 1

i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i +=1

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

i = 0
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")

# For Loop statement
fruits = ["apple","orange","mango"]
for x in fruits:
  print(x)

for ch in "banana":
  print(ch)

fruits = ["apple","mango","banana","strawberry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

fruits = ["apple","mango","banana","strawberry"]
for x in fruits:
  if x == "banana":
    break
  print(x)

fruits = ["apple","mango","banana","strawberry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

fruits = ["apple","mango","banana","strawberry"]
for x in fruits:
  if x == "banana":
    break
  print(x)

for i in range(len(fruits)):
  print(fruits[i])

for i in range(0,10):
  print(i)

for i in range(0,10,2):
  print(i)

for i in range(0,10, 2):
  print(i)
else:
  print("it is done!")

for i in range(6):
  if i == 3: break
  print(i)
else:
  print("finally finished")

# A nested loop is a loop inside a loop.

# The "inner loop" will be executed one time for each iteration of the "outer loop"

adj = ["red","big","tasty"]
fruits = ["apple","banana","cherry"]
for x in adj:
  for y in fruits:
    print(x,y)

for i in range(0,10,2):
    pass

"""# Python Functions
A function is a block of code which runs only when it is called.

One can pass data, known as parameters into a function.
"""

def my_function():
  print("Hello from a function")
my_function()

"""Information can be passed into a function as arguments.

Arguments are specified after the function name, inside the parantheses. One can add many arguments as one wants, just by separating them with a comma.

"""

def my_function(fname):
  print(fname + "Refsnes")
my_function("Emil")
my_function("Tobias")
my_function("Linus")

"""Parameters or Arguments

From a function's perspective:

A parameter is the variable listed inside the parantheses in the function definition.

An argument is the value that is sent to the function when it is called.

By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.
"""

def my_function(fname,lname):
  print(fname + " " + lname)
my_function("Emil","Refsens")

"""# Arbitary Arguments, *args
If one does not know how many arguments will be passed into the function, add a * before the parameter name in the function definition, this way the function will receive a tuple of arguments.
"""

def my_function(*args):
  print("The youngest child is " + args[2])
my_function("Emil","Tobias","Linus")

# one can send arguments with the key = value syntax, the order of arguments is not important.
def my_function(child3,child2,child1):
  print("The youngest child is " + child3)

my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")

"""# Arbitary Keywords Arguments (**kwargs)
If one does noy know how many keyword arguments will be passed into your function, add two asterisk ** before the parameter name in the function definition, this way the function will receive a dictionary of arguments.

"""

def my_function(**kwargs):
  print("His last name is " + kwargs["lname"])

my_function(fname = "Tobias", lname = "Linus")

# Default Parameter Value
# If one call the function without argument, it uses the default value
def my_function(country = "Norway"):
  print("I am from " + country)

my_function("Spain")
my_function("India")
my_function()

"""# Passing a List as an argument
One can send any data types of argument to a function(string, number, list, dictionary) and it will be treated as the same data type inside the function.
"""

def my_function(food):
  for x in food:
    print(x)

fruits = ["apple","banana","cherry"]

my_function(fruits)

# return Values: a function return a value, use the return statement

def my_function(x):
  return 5 * x

print(my_function(3))
print(my_function(5))
print(my_function(9))

"""
The Pass Statement:
Function definition can not be empty, but if you for some reason
have a function definition with no content, put in the pass statement
to avoid getting an error.
"""
def my_function():
  pass

my_function()

# Positional - only Arguments
# One can specify a function that can have only positional arguments,
# or only keyword arguments
# To specify that a function can have only positional arguments add, / after the argument

def my_function(x, /):
  print(x)

my_function(3)
my_function(x = 3) # will raise an error

"""Without the, / one is allowed to use keyword argument even if the function expects positional arguments. But when , / is added, one will get an erro if he/she tries to send a keyword argument."""

# Keyword only Argument: To specify that a function have only keyword
# arguments, add *, before the argument

def my_function(*, x):
  print(x)

my_function(x = 10)

# Without the *, one is allowed to use positional arguments even if the
# function expects keyword arguments

def my_function(*, x):
  print(x)

my_function(3)

"""# combine Positional only and Keyword-only
One can combine the two argument types in the same function.

Any argument before the / , are positional, and any argument after the *, are key word - only
"""

def my_function(x,y,/,*,w,z):
  print(x,y,w,z)

my_function(3,4,w = 5,z = 6)

def my_function(x,y,/,*,w,z):
  print(x + y + w + z)

my_function(3,4,w = 5,z = 6)

"""# Recursion
Python accepts function recursion, which means a defined function can call itself, which has the benefit of the meaning that one can loop through data to reach a result.

Drawbacks are: a function that never terminates, or one that uses excess amounts of memorry or processor power.



"""

# Recursion Example

def tri_recursion(k):
  if(k > 0):
    result = k + tri_recursion(k - 1)
    print(result)
  else:
    result = 0
  return result

print("\n\nRecursion Example result")
tri_recursion(6)

"""# Python Lambda

A lambda function is a small anonymous function.

A lambda function can take any numbe of arguments, but can only have one expression.

lambda arguments: expession
"""

x= lambda a,b: a+b

print(x(4,5))

x = lambda a: a + 10
print(x(2))

x = lambda a,b,c: a + b * c
print(x(2,3,4))

"""# Why use lambda function
The power of lambda is better shown when one uses it as an anonymous function inside of another function.
"""

def my_function(n):
  return lambda a: a * n

my_doubler = my_function(2)
print(my_doubler(11))

def my_function(a,b,c):
  return lambda x: x + a + b * c

newfunc = my_function(2,3,4)
print(newfunc(11))

"""# Python Arrays
Python does not have built-in support for arrays, but python lists can be used instead. To work with arrays, a python library called numpy can be used.


"""

# Creating an array containing car names
cars = ["Ford","Bmw","Alpha"]
# Access the elements of an array
cars[0]

# Modifying the value in an array
cars[1] = "Jeep"
print(cars)

# Use len() method to return the length of an array
len(cars)

# Looping through an array
cars = ["BMW","JEEP","FORD"]
for x in cars:
  print(x)

# Adding Array Elements: One can use append() method to add elements to the array
cars.append("BENZ")
print(cars)

# removing Array Elements: one can use pop() method
cars.pop(3)
print(cars)

# removing an element from an array: one can use remove() method
cars = ["BMW","FORD","JEEP","BENZ"]
cars.remove("BENZ")
print(cars)

"""Note: The list's remove() method only removes the first occurance of the specified value.

# Python Classes and Objects
Python is an object Oriented Programming language. Almost everything in python is an object, with its properties and methods.
"""

# Creating a class
class MyClass:
  x = 5

# Create an Object: one can use the class name to create an object
class MyClass:
  x = 5
p1 = MyClass()
print(p1.x)

"""# The __init__() function
All classes have a function called __init__(), which is always executed when the class is being initiated.

Use the __init__() function assign values to object properties or other operations that are necessary to do when the object is being executed.

The __init__() function is called automatically every time the class is being used to create a new object.


"""

class MyClass:
  def __init__(self,fname,age):
    self.fname = fname
    self.age = age

p1 = MyClass("John",61)
print(p1.fname)
print(p1.age)

"""# The __str__ Function
The __str__() function controls what should be returned when the class object is represented as a string.

"""

# The string representation of an object without the __str__() function
class person:
  def __init__(self,fname,age):
    self.fname = fname
    self.age = age

p1 = person("John",36)
print(p1)

# The string representation of an object with __str__() function
class person:
  def __init__(self,name,age):
    self.name = name
    self.age = age
  def __str__(self):
    return(f"{self.name},{self.age}")

p1 = person("John",36)
print(p1)

"""# Object Method
Objects can also contain methods. Methods in objects are functions that belong to the object.

The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.
"""

class person:
  def __init__(self,name,age):
    self.name = name
    self.age = age
  def myfunc(self):
    print(f"my name is {self.name} and my age is {self.age}")

p1 = person("John",36)
p1.myfunc()

"""# The Self Parameter
The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.
"""

# Using other words instead of self
class person:
  def __init__(anothername,name,lname,age):
    anothername.name = name
    anothername.age = age
  def myfunc(abc):
    print("My name is " + abc.name)

p1 = person("John","Tobias",36)
p1.myfunc()

# To modify Object Properties
p1.age = 40
p1.age

# Delete Object Properties
del p1.age
p1.age

# delete Objects
del p1
p1.age

""" The Pass Statement
class definition can not be empty, but if you for some reason have a class definition
with no content, put in the pass statement to avoid getting an error.
"""
class person:
  pass

"""# Python Inheritance

Inheritance allows us to define a class that inherits all the methods and properties from another class.

Parent class is the class being inherited from alse called base class.

Child class is the class that inherits from another class, also called derived class.
"""

# create a Parent Class: any class can be a parent class, so the syntax is the same as creating any other class.
class person:
  def __init__(self,name,age):
    self.name = name
    self.age = age
  def myfunc(self):
    print(f"my name is {self.name},my age is {self.age}")
p1 = person("John",36)
p1.myfunc()

# creating a child class
class student(person):
  pass

# Using student class to create an object, and then execute the printname method
x = student("Mike",48)
x.myfunc()

# Adding __init__() function to the child class
# The child's __init__() function overrides the inheritance of the parent's __init__() function
# To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function
class student(person):
  def __init__(self,name,age):
    person.__init__(self,name,age)

# Use the super() function
# python has a super() function, which will make the child class inherit all the methods and properties from its parent
# By suing super() function, one does not need to use the name of the parent element, which will automatically inherit the methods and properties from its parent.
# Add proper
class student(person):
  def __init__(self,name,age,year):
    super().__init__(name,age)
    self.graduationyear = 2019
  def welcome(self):
    print("Welcome", self.name, "my age is ", self.age, "the graduation year is ", self.graduationyear)
x = student("Dexter",46,2019)
x.welcome()

"""# Python Iterators
An iterator is an object that contains a countable number of values, an iterator is an object that can be iterated upon, meaning that you can transverse through all the values.

Technically, in python, an iterator is an object which implements the iterator protocol, which consists of the methods __iter__() and __next__().

Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.


"""

mytuple = ("apple","banana","kiwi","orange")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))

mystr = "banana"
myit = iter(mystr)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))

# Looping through an iterator
mytuple = ("apple","orange","kiwi","banana")
for x in mytuple:
  print(x)

mystr = "banana"
for x in mystr:
  print(x)

"""# Create an Iterator
to create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.

The __iter__() method acts similar, you can do operations, but must always return the iterator object itself.

The __next__() method also allows you to do operations, and must return the next item in the sequence.
"""

class MyNumber:
  def __iter__(self):
    self.a = 1
    return self
  def __next__(self):
    x = self.a
    self.a += 1
    return x

MyClass = MyNumber()
myiter = iter(MyClass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))

# To prevent the iteration from going on forever, one can use StopIteration statement.
# In the __next__() method, one can add a terminating condition to raise an error if the iteration is done a specified number of times.
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)

"""# Python Polymorphism
In programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes.

An example of python function that can be used on different objects is the len() function.

String: for strings len() returns the number of characters
"""

x = "Hello World"
print(len(x))

mytuple = ("apple","orange","kiwi")
len(mytuple)

thisdict = {
    "name": "John",
    "lastname":"Tobias",
    "age":36}
len(thisdict)

# Polymorphism is often used in class methods, where we can have multiple classes with the same method name
class car:
  def __init__(self,brand, model):
    self.brand = brand
    self.model = model
  def move(self):
    print("Drive!")

class boat:
  def __init__(self,brand,model):
    self.brand = brand
    self.model = model
  def move(self):
    print("Sail!")

class plane:
  def __init__(self,brand,model):
    self.brand = brand
    self.model = model
  def move(self):
    print("Fly!")

car1 = car("Ford","Mustang")
boat1 = boat("Ibiza","Touring 20")
plane1 = plane("Boeing","747")

for x in (car1,boat1,plane1):
  x.move()

"""Child classes inherits the properties and methods from the parent class.

In the example above you can see that the Car class is empty, but it inherits brand, model, and move() from Vehicle.

The Boat and Plane classes also inherit brand, model, and move() from Vehicle, but they both override the move() method.

Because of polymorphism we can execute the same method for all classes.
"""

# Inheritance Class Polymorphism
class vehicle:
  def __init__(self,brand,model):
    self.brand = brand
    self.model = model
  def move(self):
    print("Drive")
class car(vehicle):
  pass
class boat(vehicle):
  def move(self):
    print("Sail!")
class plane(vehicle):
  def move(self):
    print("Fly!")

car1 = car("Ford","Mustang")
boat1 = boat("Ibiza","North Star")
plane1 = plane("Boeing","747")

for x in (car1,boat1,plane1):
  x.move()

"""# Python Scope

A variable is only available from inside the region it is created. This is called scope.

Local Scope: A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.


"""

# Local Scope

def myfunc():
  x = 300
  print(x)

myfunc()

#  the variable x is not available outside the function, but it is available for any function inside the function
# The local variable can be accessed from a function within the function
def myfunc():
  x = 300
  def myinnerfunction():
    print(x)
  myinnerfunction()

myfunc()

# Global Scope
# A variable created in the main body of the python code is a global variable and belongs to global scope
# Global variables are available from within any scope, global and local.

x = 300

def myfunc():
  print(x)

myfunc()

print(x)

# Naming Variables
# If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables,
# one available in the global scope (outside the function) and one available in the local scope (inside the function)

x = 300

def myfunc():
  x = 150
  print(x)

myfunc()

print(x)

# Global Keyword
# If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.
# The global keyword makes the variable global

def myfunc():
  global x
  x = 300

myfunc()

print(x)

# To change the value of a global variable inside a function, refer to the variable by using the global keyword
x = 300

def myfunc():
  global x
  x = 200


myfunc()

print(x)

"""Python Modules

Consider a module to be the same as a code library.

A file containing a set of functions you want to include in your application.

To create a module save the code you want in a file with the file extension .py
"""

# Example save the code you want in a file named mymodule.py

def greeting(name):
  print("Hello" + name)

# In order to use the module created, we use the import statement

import mymodule

mymodule.greeting("John")

"""# Note: When using a function from a module, use the syntax: module_name.function_name."""

# Variables in Module: The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc)
person1 = {
    "name":"John",
    "lname": "Doe",
    "age": 37,
    "country":"Brazil"
}

# Import the module named mymodule, and access the person1 dictionary

import mymodule

p1 = mymodule.person1["age"]

print(p1)

# Renaming a Module: One can create an alias when you import a module, by using the as keyword

import mymodule as mx

a = mx.personal1["age"]
print(a)

# Built-in Modules: There are several built-in modules in python, which one can import
# Example Import and use the platform module

import platform

x = platform.system()
print(x)

# Using the dir() function: There is a built-in function to list all the function names (or variable names) in a module. The dir() function
# Note: The dir() function can be used on all modules, also the ones you create yourself.
import platform

x = dir(platform)
print(x)

# Import From Module
# One can choose to import only parts from a module, by using the from keyword

# mymodule contains below function and variable
def greeting(name):
  print("Hello" + name)

personal = {
    "name": "john",
    "lname": "Doe",
    "country":"Brazil"
}

# To import personal1 dictionary from the module

from mymodule import personal1

print(personal1["age"])

"""Note: When importing using the from keyword, do not use the module name when referring to elements in the module. Example: person1["age"], not mymodule.person1["age"]

# Python Datetime

A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.

The date contains year, month, day, hour, minute, second, and microsecond.

The datetime module has many methods to return information about the date object.
"""

# Importing datetime module to show the current date

import datetime

x = datetime.datetime.now()
print(x)

# Return the year and the name of the weekday

import datetime

x = datetime.datetime.now()

print(x.year)
print(x.strftime("%A"))

# To create a Date Objects
# To create a date, we can use the datetime() class (constructor) of the datetime module.
# The datetime() class requires three parameters to create a date: year, month, day.
# The datetime() class also takes parameters for time and timezone
# (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone)

import datetime

x = datetime.datetime(2020,11,5)

print(x)

# The strftime() Method: The datetime object has a method for formatting date objects into readable strings.
# The method is called strftime(), and takes one parameter, format, to specify the format of the returned string

import datetime

x = datetime.datetime(2018,6,1)

print(x.strftime("%B"))

"""A reference of all the legal format codes

%a ==> Weekday, short version ==> Wed

%A ==> Weekday, full version ==>	Wednesday

%w ==>	Weekday as a number 0-6, 0 is Sunday ==>	3

%d ==>	Day of month 01-31 ==>	31

%b ==>	Month name, short version ==>	Dec

%B ==>	Month name, full version ==>	December

%m ==>	Month as a number 01-12 ==>	12

%y ==>	Year, short version, without century ==>	18

%Y ==>	Year, full version ==>	2018

%H ==>	Hour 00-23 ==>	17

%I ==>	Hour 00-12 ==>	05

%p==> 	AM/PM ==>	PM

%M ==>	Minute 00-59 ==>	41

%S ==>	Second 00-59 ==>	08

%f ==>	Microsecond 000000-999999 ==>	548513

%z ==>	UTC offset ==>	+0100

%Z ==>	Timezone ==>	CST

%j ==>	Day number of year 001-366 ==>	365

%U ==>	Week number of year, Sunday as the first day of week,00-53 ==>	52

%W ==>	Week number of year, Monday as the first day of week, 00-53 ==>	52

%c ==>	Local version of date and time	Mon Dec 31 17:41:00 ==> 2018

%C ==>	Century ==>	20

%x ==>	Local version of date ==>	12/31/18

%X ==>	Local version of time ==>	17:41:00

%% ==>	A % character ==>	%

%G ==>	ISO 8601 year ==>	2018

%u ==>	ISO 8601 weekday (1-7) ==>	1

%V ==>	ISO 8601 weeknumber (01-53) ==>	01

# Python Math
Python has a set of built-in math functions, including an extensive math module, that allows you to perform mathematical tasks on numbers.

Python has also a built-in module called math, which extends the list of mathematical functions.

When you have imported the math module, you can start using methods and constants of the module.

The math.sqrt() method for example, returns the square root of a number

The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer
"""

# Built -in Math functions
# The min() and max() functions can be used to find the lowest or highest value in an iterable

y = min(5,6,7,8)
w = max(10,11,12,13)

print(y)
print(w)

# The abs() function returns the absolute (positive) value of the specified number

x = abs(-7.8)
print(x)

# The pow(x, y) function returns the value of x to the power of y (x^y)

x = pow(4,5)
print(x)

# The Math Module

import math

x = math.sqrt(64)
print(x)

# floor and ceil methods

import math

x = math.floor(1.4)
y = math.ceil(1.6)

print(x)
print(y)

# The math.pi constant, returns the value of PI (3.14...)

x =math.pi

print(x)

"""# Python JSON
JSON is a syntax for storing and exchanging data.

The result will be a Python dictionary.

JSON is text, written with JavaScript object notation.

Parse JSON - Convert from JSON to Python
If you have a JSON string, you can parse it by using the json.loads() method.

You can convert Python objects of the following types, into JSON strings:

dict
list
tuple
string
int
float
True
False
None


# It is not very easy to read, with no indentations and line breaks.The json.dumps() method has parameters to make it easier to read the result.
"""

# JSON in Python

import json

# some JSON
x = '{"name":"john","lname":"Doe","age":30,"city":"New York"}'

# parse x
y = json.loads(x)

# The result is a python dictionary
print(y["age"])

# Convert from python to json

import json

# a python object (dictionary)

x = {
    "name":"john",
    "lname":"Doe",
    "age":30,
    "city":"New York"
}

# convert into JSON:
y = json.dumps(x)

# the result is a JSON string:
print(y)

# Convert python objects into JSON strings, and print the value

import json

print(json.dumps({"name":"john","age":36,"country":"Brazil"}))
print(json.dumps(["apple","orange"]))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))
print(json.dumps(24))
print(json.dumps("Hello"))
print(json.dumps(32.04))
print(json.dumps(("apple","orange","kiwi")))

# Converting a python object containing all the legal data types

x = {
    "name":"john",
    "lname":"doe",
    "year":36,
    "married": True,
    "divorce": False,
    "children":("Alex","Billy"),
    "pets":None,
    "cars":[{"model":"BMW230","mpg":27.5},{"model":"Ford Edge","mpg":24.1}]
}

print(json.dumps(x))

# Format the Result
# Use the indent parameter to define the numbers of indents
json.dumps(x,indent = 4)

# You can also define the separators, default value is (", ", ": "), which means using a comma and a space to separate each object,
#and a colon and a space to separate keys from values

json.dumps(x, indent = 4, separators = (". ","= "))

# The json.dumps() method has parameters to order the keys in the result
json.dumps(x, indent=4, sort_keys = True)

"""Python PIP

What is PIP? PIP is a package manager for Python packages, or modules.

A package contains all the files you need for a module.

Modules are Python code libraries you can include in your project.

Check if the PIP is installed on your system, entering the script in the terminal

pip --version

Download a Package: Downloading a package is very easy. Open the command line interface and tell PIP to download the package you want. Navigate your command line to the location of Python's script directory, and type the following:

pip install camelcase

Remove a Package: Use the uninstall command to remove a package

pip unistall camelcase

List Packages: Use the list command to list all the packages installed on your system:

pip list
"""

# Using a package
!pip install camelcase
import camelcase

c = camelcase.CamelCase()

txt = "hello world!"

print(c.hump(txt))

"""# Python Try Except

The try block lets you test a block of code for errors.

The except block lets you handle the error.

The else block lets you execute code when there is no error.

The finally block lets you execute code, regardless of the result of the try- and except blocks.

Exception Handling: When an error occurs, or exception as we call it, Python will normally stop and generate an error message
"""

# Exception handling: Since the try block raises an error, the except block will be executed.
# Without the try block, the program will crash and raise an error

try:
  print(z)
except:
  print("An exception occured")

# Many Exveptions

try:
  print(z)
except NameError:
  print("Variable is not defined")
except:
  print("Something else went wrong")

# Else: You can use the else keyword to define a block of code to be executed if no errors were raised
try:
  print("Hello")
except:
  print("Something went wrong!")
else:
  print("Nothing went wrong")

# Finally: The finally block, if specified, will be executed regardless if the try block raises an error or not
try:
  print(z)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")

# example using all options above

try:
  f = open("demofile.txt")
  try:
    f.write("Lorem Ipsum")
  except:
    print("Something went wrong when writing to the file")
  finally:
    f.close()
except:
  print("Something went wrong when opening the file")

"""Raise an exception

As a Python developer you can choose to throw an exception if a condition occurs.

To throw (or raise) an exception, use the raise keyword.You can define what kind of error to raise, and the text to print to the user
"""

x = -1
if x < 0:
  raise Exception("Sorry, no numbers below zero!")

x = "hello"
if (type(x) is not int) or (not type(x) is int):
  raise TypeError("Only integers are allowed")

"""# Python User Input

Python allows for user input.

That means we are able to ask the user for input.

The method is a bit different in Python 3.6 than Python 2.7.

Python 3.6 uses the input() method.

Python 2.7 uses the raw_input() method.

Python stops executing when it comes to the input() function, and continues when the user has given some input
"""

username = input("What is your username? ")
print("Username is " + username)

"""# Python String Format

To make sure a string will display as expected, we can format the result with the format() method.

The format() method allows you to format selected parts of a string.

Sometimes there are parts of a text that you do not control, maybe they come from a database, or user input?

To control such values, add placeholders (curly brackets {}) in the text, and run the values through the format() method

"""

price = 49
txt = "The price is {} dollars."
print(txt.format(price))

# You can add parameters inside the curly brackets to specify how to convert the value.
# Format the price to be displayed as a number with two decimals

price = 49
txt = "The price is {:.2f} dollars"
print(txt.format(price))

# Multiple Values
quantity = 3
itemno = 567
price = 49
mytxt = "I want {} peices of item number {} for {:.2f} dollars"
print(mytxt.format(quantity,itemno,price))

# Index Number: You can use index numbers (a number inside the curly brackets {0}) to be sure the values are placed in the correct placeholders
quantity = 3
itemno = 670
price = 49
mytext = "I want {0} pieces of  item number {1} for {2:.2f} dollars"
print(mytext.format(quantity,itemno,price))

# if you want to refer to the same value more than once, use the index number

age = 36
name = "John"
text = "His name is {0}. {0} is {1} year old"
print(text.format(name,age))

# Named Indexes: one can also use named indexes by entering a name inside the curly brackets {carname},
# but then one must use names when one passes the parameter values txt.format(carname = "Ford")

myorder = "I have a {carname}, it is a {model}"
myorder.format(carname = "Ford", model = "Mustang")

"""# Python File open

File handling is an important part of any web application.

Python has several functions for creating, reading, updating, and deleting files.

File Handling

The key function for working with files in Python is the open() function.

The open() function takes two parameters; filename, and mode.

There are four different methods (modes) for opening a file:

"r" - Read - Default value. Opens a file for reading, error if the file does not exist

"a" - Append - Opens a file for appending, creates the file if it does not exist

"w" - Write - Opens a file for writing, creates the file if it does not exist

"x" - Create - Creates the specified file, returns an error if the file exists

In addition you can specify if the file should be handled as binary or text mode:

"t" - Text - Default value. Text mode

"b" - Binary - Binary mode (e.g. images)
"""

# Syntax: Open a file for reading
f = open("mydemo.txt")
# or "r" for read, and "t" for text are the default values
f = open("mydemo.txt","rt")

"""# Python File Open
to open the file, use the built-in open() function, which returns a file object, which has a read() method for reading the content of the file.

"""

f = open("demo.txt","r")
print(f.read())

# If file is located in a different location, one will have to specify the file path
d = open("D:\\myfiles\welcome.txt","r")
print(f.read())

# By default the read() method returns the whole text, but one can specift how many characters one want to return
f = open("D:\\myfiles\welcome.txt","r")
print(f.read(5))

# One can read one line by using readline() method
f = open("demofile.txt","r")
print(f.readline())

# By calling readline() two times, one can read the two first lines
f = open("demofile.txt","r")
pint(f.readline())
print(f.readline())

# By looping through the lines of the file, one can read the whole file line by line
f = open("demotext.txt","r")
for x in f:
  print(x)

# Close Files: one should always close the files, as in some cases, due to buffering, the changes made to afile may not show til the file is closed
f = open("demofile.txt","r")
print(f.readline())
f.close()

"""# Python File Write
to write to an existing file, one must add a parameter to the open() function:
"a": append, which will append to the end of the file
"w": write, which overwrite any existing content
"""

f = open("demofile.txt","a")
f.write("Now the file has more content!")
f.close()
# Open and read the file after the appending
f = open("demofile.txt","r")
print(f.read())

# Overwrite the content
f = open("demofile.txt","w")
f.write("Woops! I have deleted the content!")
f.close()
# Open and read the file after overwriting
f = open("demofile.txt","r")
print(f.read())

"""Create a new file

to create a new file in python, use the open() method, with one of the following parameters:

"x": will create a file and return an error if the file exists.

"a": append-will create a file if the specified file does not exist.

"w": write-will create a file if the specified file does not exist.
"""

# Create a file called "myfile.txt"

f = open("myfile.txt","x")

# Crate a file if it does not exist
f = open("myfile.txt","w")

# python Delete File: to delete a file, one must import the OS module, and run its os.remove() function
# Remove the file "demofile.txt"

import os
os.remove("demofile.txt")

# Check if the file exists, then delete it
import os
if os.path.exists("demofile.txt"):
  os.remove("demofile.txt")
else:
  print("The file does not exists")

# Delete Folder: to delete an entire folder, use the os.rmdir() method
# One can only remove an empty folder.
import os
os.rmdir("myfolder")

"""# Python RegEx
A RegEx, or regular expression, is a sequence of characters that forms a search pattern.
RegEx can be used to check if a string contains the specified search pattern.

RegEx in Python

When one import the re module, one can start using regular expressions
"""

# Search the string to see if it starts with "The" and ends with "Spain"
import re
txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

if x:
  print("YES! We have a match!")
else:
  print("No match")

"""# RegEx Functions

The re module offers a set of functions that allows one to search a string for a match

findall: returns a list containing all matches

search: returns a match object if there is a match anywhere in the string

split: returns a list where the string has been split at each match

sub: replaces one or many matches witha string

# Metacharacters

Metacharacters are characters with a special meaning

[] ==> A set of characters ==> "[a-m]"

\ ==> Signals a special sequence (can also be used to escape special character) ==>  "\d"

. ==> any character(except newline character) ==> "he..o"

^ ==> starts with ==> "^hello"

$ ==> Ends with ==> "plants$"

* ==> Zero or more ==> "he.*o"

+ ==> One or more occurance ==> "he.+o"

? ==> Zero or one occurrences ==> "he.?o"

{} ==> Exactly specified number of occurances ==> "he.{2}o"

| ==> Either or ==> "falls|stays"

() ==> Capture and group

# Special Sequence

A special sequence is a \ folowed by one of the characters in the list below, and has a special meaning:

\A ==> returns a match if the specified characters are at the beginning of the string ==> "\AThe"

\b ==> returns a match where the specified characters are at the beginning or at the end of a word (the "r" in the beginning is making sure that the string is being treated as a "raw string") ==> r"\bain"  r"ain\b"

\B ==> returns a match where the specified characters are present, but not at the beginning (or at the end) of a word (the "r" in the beginning is making sure that the string treated as a "raw string") ==> r"\Bain" r"ain\B"

\d ==> returns a match where the string contains digits(numbers from 0-9) ==> "\d"

\D ==> returns a match where the string DOES NOT contain digits ==> "\D"

\s ==> returns a match where the string contains a white space character ==> "\s"

\S ==> returns a match where the string DOES NOT contain a white space character ==> "\S"

\w ==> returns a match where the string contains any word characters(characters from a to Z, digits from 0-9, and the underscore _ character) ==> "\w"

\W ==> returns a match where the string DOES NOT contain any word characters ==> "\W"

\Z ==> returns a match if the specified characters are at the end of the string ==> "Spain\Z"

# Sets

A set is a set of characters inside a pair of squarebrackets [] with a special meaning

[arn] ==> returns a match where one of the specified characters (a,r, or n) is present


[a-n] ==> returns a match for any lowercase character, alphabetically between a and n

[^arn] ==> returns a match for any character EXCEPT a, r, and n

[0123] ==> returns a match where any of the specified digits (0,1,2, or 3) are present

[0-9] ==> returns a match for any digit between 0 and 9

[0-5][0-9] ==> returns a match for any two digit numbers from 00 and 59

[a-zA-Z] ==> returns a match for any character alphabetically between a and z, lower case OR upper case

[+] ==> in sets, + , * , . , | , () , $ , {} has no special meaning, so [+] means: return a match for any + character in the string
"""

txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

if x:
  print("YES! We have a match!")
else:
  print("No match")

import re

txt = "The rain in Spain"

#Check if the string has any characters between a and n:

x = re.findall("[a-n]", txt)

print(x)

if x:
  print("Yes, there is at least one match!")
else:
  print("No match")

import re

txt = "The rain in Spain"

#Check if the string has other characters than a, r, or n:

x = re.findall("[^arn]", txt)

print(x)

if x:
  print("Yes, there is at least one match!")
else:
  print("No match")

import re

txt = "The rain in Spain"

#Check if the string has any 0, 1, 2, or 3 digits:

x = re.findall("[0123]", txt)

print(x)

if x:
  print("Yes, there is at least one match!")
else:
  print("No match")

import re

txt = "8 times before 11:45 AM"

#Check if the string has any digits:

x = re.findall("[0-9]", txt)

print(x)

if x:
  print("Yes, there is at least one match!")
else:
  print("No match")

import re

txt = "8 times before 11:45 AM"

#Check if the string has any two-digit numbers, from 00 to 59:

x = re.findall("[0-5][0-9]", txt)

print(x)

if x:
  print("Yes, there is at least one match!")
else:
  print("No match")

import re

txt = "8 times before 11:45 AM"

#Check if the string has any characters from a to z lower case, and A to Z upper case:

x = re.findall("[a-zA-Z]", txt)

print(x)

if x:
  print("Yes, there is at least one match!")
else:
  print("No match")

import re

txt = "8 times before 11:45 AM"

#Check if the string has any + characters:

x = re.findall("[+]", txt)

print(x)

if x:
  print("Yes, there is at least one match!")
else:
  print("No match")

# The findall() function: returns a list containing all matches
# The list contains the matches in the order they are found
# If no matches are found, an empty list is returned

import re

txt = "The rain in Spain"
x = re.findall("ai",txt)
print(x)

import re
txt = "The rain in Spain"
x = re.findall("portugal",txt)
print(x)

# The search() function searches the string for a match, and returns a match object if there is a match.
# if there is more than one match, only the first occurance of the match will be returned
# if no match found, the value None is returned
# Search for the first white-space character in the string
import re
txt = "The rain in Spain"
x = re.search("\s",txt)
print("The first white-space character is located in position", x.start())

import re
txt = "The rain in Spain"
x = re.search("Portugal",txt)
print(x)

# The split() Function
# The split() function returns a list, where the string has been split at each match

# split at each white-space character
import re
txt = "The rain in Spain"
x = re.split("\s",txt)
print(x)

# One can control the number of occurances by specifying the maxsplit parameter

# split the string only at the first occurance

import re
txt = "The rain in Spain"
x = re.split("\s",txt,1)
print(x)

# The sub() function: the sub() function replaces the matches with the text of one's choice

# Replace every white-space character with the number 9

import re
txt = "The rain in Spain"
x = re.sub("\s","9",txt)
print(x)

# One can control the number of replacements by specifying the count parameter

# Replace the first 2 occurances

import re

txt = "The rain in Spain"
x = re.sub("\s","9",txt,2)
print(x)

# Match Object: a match object is an object containing information about the search and the result.
# if there is no match, the value None will be returned, instead of the match object

# Do a search that will return a Match Object

import re
txt = "The rain in Spain"
x = re.search("ai",txt)
print(x)

"""The Match Object has properties and methods used to retrieve information about the search and the result:

.span() ==> returns a tuple containing the start-, and end positions of the match

.string ==> returns the string passed into a function

.group() returns the part of the string where there was a match


"""

# Print the position of the fisrt match occurance (start and end position)
# The regular expression looks for any words that starts with an upper case "S"

import re
txt = "The rain in Spain"
x = re.search(r"\bS\w+",txt)
print(x.span())

# print the string passed into the function

import re
txt = "The rain in Spain"
x = re.search(r"\bS\w+",txt)
print(x.string)

# print the part of the string where there was a match
# The regular expression looks for any words that starts with an upper case "S"
# if there is no match, the value None will be returned, instead of the Match Object
import re
txt = "The rain in Spain"
x = re.search(r"\bS\w+",txt)
print(x.group())

